{"version":3,"file":"index-dc58fa7a.js","sources":["../../src/utils/store/createStore.ts","../../src/models/$patternMatrix.ts","../../src/models/$samples.ts","../../src/utils/store/useStore.ts","../../src/models/$currentNoteCoords.ts","../../src/models/$currentPlayPosition.ts","../../src/models/F$isPatternPlaying.ts","../../src/utils/store/createFlag.ts","../../src/utils/store/useFlagStore.ts","../../src/views/DrumRoll.tsx","../../src/controls/drumPattern.ts","../../src/models/$tempo.ts","../../src/controls/play.ts","../../src/views/PlayBtn.tsx","../../src/index.tsx","../../src/App.tsx"],"sourcesContent":["import { Store } from '@src/utils/store/types'\n\nexport const createStore = <T>(initValue: T): Store<T> => {\n  let value = initValue\n  const cbs = new Set()\n  return {\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    setData: (data: ((arg: T) => T) | T) => {\n      if (typeof data === 'function') {\n        value = (data as (arg: T) => T)(value)\n      } else {\n        value = data\n      }\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nconst MATRIX_WIDTH = 16\nconst MATRIX_HEIGHT = 3\nexport const $patternMatrix = createStore<boolean[][]>(\n  new Array(MATRIX_HEIGHT).fill(\n    new Array(MATRIX_WIDTH).fill(false)\n  ) as boolean[][]\n)\n\nexport const toggleNote = (rowIndex: number, colIndex: number) => {\n  $patternMatrix.setData((prev) => {\n    return prev.map((row, ri) => {\n      return row.map((value, ci) => {\n        return ri === rowIndex && ci === colIndex ? !value : value\n      })\n    })\n  })\n}\n\nexport const clearMatrix = () => {\n  $patternMatrix.setData((prev) => {\n    return prev.map((row) => {\n      return row.map(() => {\n        return false\n      })\n    })\n  })\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $samples = createStore<\n  { name: string; audioBuffer: AudioBuffer }[]\n>([])\n\nexport const audioContext = new AudioContext()\n\nasync function getSample(path: string, name: string) {\n  const data = await fetch(`./${path}`)\n  const arrayBuffer = await data.arrayBuffer()\n  const audioBuffer = await audioContext.decodeAudioData(arrayBuffer)\n  return {\n    name,\n    audioBuffer,\n  }\n}\n\nPromise.all([\n  getSample('sounds/h.wav', 'HiHat'),\n  getSample('sounds/s.wav', 'Snare'),\n  getSample('sounds/k.wav', 'Kick'),\n]).then((samples) => {\n  $samples.setData(samples)\n})\n\nexport const playAudioBuffer = (audioBuffer: AudioBuffer) => {\n  const sourceNode = audioContext.createBufferSource()\n  sourceNode.buffer = audioBuffer\n\n  // Создаем узел управления громкостью и подключаем его к контексту\n  const gainNode = audioContext.createGain()\n\n  // Подключаем источник к узлу управления громкостью\n  sourceNode.connect(gainNode)\n\n  // Подключаем узел управления громкостью к выходу аудио контекста\n  gainNode.connect(audioContext.destination)\n\n  // Воспроизводим аудио\n  sourceNode.playbackRate.value = 1\n  sourceNode.start()\n}\n","import { useSyncExternalStore } from 'react'\n\nimport { Store } from '@src/utils/store/types'\n\nexport const useStore = <T>(store: Store<T>) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $currentNoteCoords = createStore({ rowIndex: 0, colIndex: 0 })\nexport const selectNote = (rowIndex: number, colIndex: number) => {\n  $currentNoteCoords.setData({\n    rowIndex,\n    colIndex,\n  })\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $currentPlayPosition = createStore(0)\nexport const incrementCurrentPlayPosition = () => {\n  $currentPlayPosition.setData((prev) => prev + 1)\n}\nexport const resetCurrentPlayPosition = () => {\n  $currentPlayPosition.setData(0)\n}\n","import { createFlag } from '@src/utils/store/createFlag'\n\nexport const F$isPatternPlaying = createFlag(false)\n","import { Flag } from '@src/utils/store/types'\n\nexport const createFlag = (initValue: boolean): Flag => {\n  let value = initValue\n  const cbs = new Set()\n  // const iterateCbs = () => {\n  //   cbs.forEach((cb: any) => {\n  //     cb(value)\n  //   })\n  // }\n  return {\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    on: () => {\n      value = true\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    off: () => {\n      value = false\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    toggle: () => {\n      value = !value\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { useSyncExternalStore } from 'react'\n\nimport { Flag } from '@src/utils/store/types'\n\nexport const useFlagStore = (store: Flag) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n","import { handleToggleNote, keyboardHandler } from '@src/controls/drumPattern'\nimport { $currentNoteCoords } from '@src/models/$currentNoteCoords'\nimport { $currentPlayPosition } from '@src/models/$currentPlayPosition'\nimport { $patternMatrix } from '@src/models/$patternMatrix'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { useFlagStore } from '@src/utils/store/useFlagStore'\nimport { useStore } from '@src/utils/store/useStore'\n\nexport const DrumRoll = () => {\n  const drumRoll = useStore($patternMatrix)\n  const currentNote = useStore($currentNoteCoords)\n  const isPlaying = useFlagStore(F$isPatternPlaying)\n  const currentPosition = useStore($currentPlayPosition)\n  return (\n    <div\n      onKeyDown={(e) => {\n        console.log(e.code)\n        keyboardHandler(e.code)\n      }}\n    >\n      {drumRoll.map((row, rowIndex) => {\n        return (\n          <div\n            className={'flex gap-1 outline-none'}\n            key={rowIndex}\n            tabIndex={1}\n          >\n            {row.map((value, colIndex) => {\n              return (\n                <div\n                  onClick={() => {\n                    handleToggleNote(rowIndex, colIndex)\n                  }}\n                  className={`mb-1 w-12 h-8 cursor-pointer ${\n                    currentNote.rowIndex === rowIndex &&\n                    currentNote.colIndex === colIndex\n                      ? 'border-4 border-violet-400'\n                      : ''\n                  } ${\n                    value\n                      ? 'bg-blue-700'\n                      : colIndex % 4 === 0\n                      ? 'bg-blue-200'\n                      : 'bg-blue-100'\n                  } ${\n                    isPlaying &&\n                    currentPosition % drumRoll[0].length === colIndex\n                      ? 'opacity-50'\n                      : ''\n                  }`}\n                  key={`${rowIndex}-${colIndex}`}\n                ></div>\n              )\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import { $currentNoteCoords, selectNote } from '@src/models/$currentNoteCoords'\nimport { $patternMatrix, toggleNote } from '@src/models/$patternMatrix'\n\nexport const handleToggleNote = (rowIndex: number, colIndex: number) => {\n  toggleNote(rowIndex, colIndex)\n  selectNote(rowIndex, colIndex)\n}\nexport const keyboardHandler = (key: string) => {\n  const { rowIndex, colIndex } = $currentNoteCoords.getValue()\n  const matrix = $patternMatrix.getValue()\n  // TODO\n  switch (key) {\n    case 'Enter':\n      toggleNote(rowIndex, colIndex)\n      break\n    case 'ArrowLeft':\n      if (typeof matrix[rowIndex]?.[colIndex - 1] !== 'undefined') {\n        selectNote(rowIndex, colIndex - 1)\n      }\n      break\n    case 'ArrowDown':\n      if (typeof matrix[rowIndex + 1]?.[colIndex] !== 'undefined') {\n        selectNote(rowIndex + 1, colIndex)\n      }\n      break\n    case 'ArrowRight':\n      if (typeof matrix[rowIndex]?.[colIndex + 1] !== 'undefined') {\n        selectNote(rowIndex, colIndex + 1)\n      }\n      break\n    case 'ArrowUp':\n      if (typeof matrix[rowIndex - 1]?.[colIndex] !== 'undefined') {\n        selectNote(rowIndex - 1, colIndex)\n      }\n      break\n  }\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $tempo = createStore({\n  bpm: 120,\n  ms: 125,\n})\n\nexport const setTempoByBpm = (bpm: number) => {\n  $tempo.setData({\n    bpm,\n    ms: Math.floor(15_000 / bpm),\n  })\n}\n\nexport const setTempoByIntervalMs = (ms: number) => {\n  $tempo.setData({\n    bpm: Math.floor(15_000 / ms),\n    ms,\n  })\n}\n","import {\n  $currentPlayPosition,\n  incrementCurrentPlayPosition,\n  resetCurrentPlayPosition,\n} from '@src/models/$currentPlayPosition'\nimport { $patternMatrix } from '@src/models/$patternMatrix'\nimport { $samples, playAudioBuffer } from '@src/models/$samples'\nimport { $tempo } from '@src/models/$tempo'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\n\nlet interval: any = null\nexport const handleStartPlaying = () => {\n  F$isPatternPlaying.on()\n  const samples = $samples.getValue()\n  interval = setInterval(() => {\n    const currentPosition = $currentPlayPosition.getValue()\n    const matrix = $patternMatrix.getValue()\n    matrix.forEach((row, rowIndex) => {\n      row.forEach((value, colIndex) => {\n        if (value && currentPosition % matrix[0].length === colIndex) {\n          playAudioBuffer(samples[rowIndex].audioBuffer)\n        }\n      })\n    })\n\n    incrementCurrentPlayPosition()\n  }, $tempo.getValue().ms)\n}\n\nexport const handleStopPlaying = () => {\n  F$isPatternPlaying.off()\n  clearInterval(interval)\n  resetCurrentPlayPosition()\n  interval = null\n}\n\nexport const changeBpmWhilePlaying = () => {\n  clearInterval(interval)\n  interval = setInterval(() => {\n    incrementCurrentPlayPosition()\n  }, $tempo.getValue().ms)\n}\n","import { handleStartPlaying, handleStopPlaying } from '@src/controls/play'\nimport { $currentPlayPosition } from '@src/models/$currentPlayPosition'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { useFlagStore } from '@src/utils/store/useFlagStore'\nimport { useStore } from '@src/utils/store/useStore'\n\nexport const PlayBtn = () => {\n  const isPlaying = useFlagStore(F$isPatternPlaying)\n  const position = useStore($currentPlayPosition)\n\n  return (\n    <button\n      className={'border p-3 rounded'}\n      onClick={isPlaying ? handleStopPlaying : handleStartPlaying}\n    >\n      {isPlaying ? 'Stop' : 'Play'} - {position}\n    </button>\n  )\n}\n","import ReactDOM from 'react-dom/client'\n\nimport { App } from './App'\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <App />\n)\n","import { clearMatrix } from '@src/models/$patternMatrix'\nimport { $samples } from '@src/models/$samples'\nimport { useStore } from '@src/utils/store/useStore'\nimport { DrumRoll } from '@src/views/DrumRoll'\nimport { PlayBtn } from '@src/views/PlayBtn'\n\nexport const App = () => {\n  const samples = useStore($samples)\n  return (\n    <div className={''}>\n      <button onClick={clearMatrix}>Clear</button>\n      <PlayBtn />\n      <div className=\"flex g-2\">\n        <div>\n          {samples?.map((item) => {\n            return (\n              <div className={'mb-1 w-20 h-8'} key={item.name}>\n                {item.name}\n              </div>\n            )\n          })}\n        </div>\n        <DrumRoll />\n      </div>\n    </div>\n  )\n}\n"],"names":["createStore","initValue","value","cbs","Set","subscribe","cb","add","delete","setData","data","forEach","getValue","$patternMatrix","Array","fill","toggleNote","rowIndex","colIndex","prev","map","row","ri","ci","clearMatrix","$samples","audioContext","AudioContext","async","getSample","path","name","fetch","arrayBuffer","audioBuffer","decodeAudioData","Promise","all","then","samples","useStore","store","useSyncExternalStore","$currentNoteCoords","selectNote","$currentPlayPosition","F$isPatternPlaying","createFlag","on","off","toggle","useFlagStore","DrumRoll","drumRoll","currentNote","isPlaying","currentPosition","jsx","onKeyDown","e","key","matrix","code","children","className","tabIndex","onClick","length","$tempo","bpm","ms","interval","handleStartPlaying","setInterval","sourceNode","createBufferSource","buffer","gainNode","createGain","connect","destination","playbackRate","start","handleStopPlaying","clearInterval","PlayBtn","position","jsxs","ReactDOM","createRoot","document","getElementById","render","item"],"mappings":"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"}