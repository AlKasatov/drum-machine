{"version":3,"file":"index-e7df0786.js","sources":["../../src/utils/store/createStore.ts","../../src/models/$patternMatrix.ts","../../src/models/$audioContext.ts","../../src/constants.ts","../../src/models/A$samples.ts","../../src/utils/store/createAsyncStore.ts","../../src/api/getSamples.ts","../../src/api/getSample.ts","../../src/utils/store/useStore.ts","../../src/models/$currentNoteCoords.ts","../../src/models/$currentPlayPosition.ts","../../src/models/F$isPatternPlaying.ts","../../src/utils/store/createFlagStore.ts","../../src/utils/store/useFlagStore.ts","../../src/views/DrumRoll.tsx","../../src/controls/drumPattern.ts","../../src/models/$tempo.ts","../../src/controls/play.ts","../../src/utils/playAudioBuffer.ts","../../src/views/PlayBtn.tsx","../../src/views/Tempo.tsx","../../src/index.tsx","../../src/App.tsx"],"sourcesContent":["import { Store } from '@src/utils/store/types'\n\nexport const createStore = <T>(initValue: T): Store<T> => {\n  let value = initValue\n  const cbs = new Set()\n  return {\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    setData: (data: ((arg: T) => T) | T) => {\n      if (typeof data === 'function') {\n        value = (data as (arg: T) => T)(value)\n      } else {\n        value = data\n      }\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nconst MATRIX_WIDTH = 16\nconst MATRIX_HEIGHT = 3\nexport const $patternMatrix = createStore<boolean[][]>(\n  new Array(MATRIX_HEIGHT).fill(\n    new Array(MATRIX_WIDTH).fill(false)\n  ) as boolean[][]\n)\n\nexport const toggleNote = (rowIndex: number, colIndex: number) => {\n  $patternMatrix.setData((prev) => {\n    return prev.map((row, ri) => {\n      return row.map((value, ci) => {\n        return ri === rowIndex && ci === colIndex ? !value : value\n      })\n    })\n  })\n}\n\nexport const clearMatrix = () => {\n  $patternMatrix.setData((prev) => {\n    return prev.map((row) => {\n      return row.map(() => {\n        return false\n      })\n    })\n  })\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $audioContext = createStore(new AudioContext())\n","export const TRACKS = [\n  {\n    title: 'Hi-hat',\n    fileName: 'hh',\n  },\n  {\n    title: 'Snare',\n    fileName: 'sd',\n  },\n  {\n    title: 'Kick',\n    fileName: 'kd',\n  },\n]\n","import { getSamples } from '@src/api/getSamples'\nimport { createAsyncStore } from '@src/utils/store/createAsyncStore'\n\nexport const A$samples = createAsyncStore<\n  { name: string; audioBuffer: AudioBuffer }[]\n>(getSamples, [])\n","import { AsyncStore } from '@src/utils/store/types'\n\nexport const createAsyncStore = <T>(\n  asyncFunc: any,\n  initData?: T\n): AsyncStore<T> => {\n  let value = {\n    isLoading: false,\n    isError: false,\n    data: initData ?? null,\n    error: null,\n  }\n  const cbs = new Set()\n  return {\n    startChange: (...args) => {\n      value = {\n        ...value,\n        isLoading: true,\n        isError: false,\n        error: null,\n      }\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n      asyncFunc(...args)\n        .then((result: any) => {\n          value = {\n            isLoading: false,\n            isError: false,\n            error: null,\n            data: result,\n          }\n          cbs.forEach((cb: any) => {\n            cb(value)\n          })\n        })\n        .catch((error: any) => {\n          value = {\n            error,\n            isError: true,\n            isLoading: false,\n            data: initData as null,\n          }\n          cbs.forEach((cb: any) => {\n            cb(value)\n          })\n        })\n    },\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    setData: (data: any) => {\n      value = data\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { getSample } from '@src/api/getSample'\nimport { TRACKS } from '@src/constants'\n\nexport const getSamples = async () => {\n  return Promise.all(\n    TRACKS.map(({ title, fileName }) => {\n      return getSample(`sounds/pack1/${fileName}.wav`, title)\n    })\n  )\n}\n","import { $audioContext } from '@src/models/$audioContext'\n\nexport async function getSample(path: string, name: string) {\n  const data = await fetch(`./${path}`)\n  const arrayBuffer = await data.arrayBuffer()\n  const audioBuffer = await $audioContext\n    .getValue()\n    .decodeAudioData(arrayBuffer)\n  return {\n    name,\n    audioBuffer,\n  }\n}\n","import { useSyncExternalStore } from 'react'\n\nimport { AsyncStore, Store } from '@src/utils/store/types'\n\nexport const useStore = <T>(store: Store<T>) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n\nexport const useAsyncStore = <T>(store: AsyncStore<T>) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $currentNoteCoords = createStore({ rowIndex: 0, colIndex: 0 })\nexport const selectNote = (rowIndex: number, colIndex: number) => {\n  $currentNoteCoords.setData({\n    rowIndex,\n    colIndex,\n  })\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $currentPlayPosition = createStore(0)\nexport const incrementCurrentPlayPosition = () => {\n  $currentPlayPosition.setData((prev) => prev + 1)\n}\nexport const resetCurrentPlayPosition = () => {\n  $currentPlayPosition.setData(0)\n}\n","import { createFlagStore } from '@src/utils/store/createFlagStore'\n\nexport const F$isPatternPlaying = createFlagStore(false)\n","import { FlagStore } from '@src/utils/store/types'\n\nexport const createFlagStore = (initValue: boolean): FlagStore => {\n  let value = initValue\n  const cbs = new Set()\n  return {\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    on: () => {\n      value = true\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    off: () => {\n      value = false\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    toggle: () => {\n      value = !value\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { useSyncExternalStore } from 'react'\n\nimport { FlagStore } from '@src/utils/store/types'\n\nexport const useFlagStore = (store: FlagStore) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n","import { handleToggleNote, keyboardHandler } from '@src/controls/drumPattern'\nimport { $currentNoteCoords } from '@src/models/$currentNoteCoords'\nimport { $currentPlayPosition } from '@src/models/$currentPlayPosition'\nimport { $patternMatrix } from '@src/models/$patternMatrix'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { useFlagStore } from '@src/utils/store/useFlagStore'\nimport { useStore } from '@src/utils/store/useStore'\n\nexport const DrumRoll = () => {\n  const drumRoll = useStore($patternMatrix)\n  const currentNote = useStore($currentNoteCoords)\n  const isPlaying = useFlagStore(F$isPatternPlaying)\n  const currentPosition = useStore($currentPlayPosition)\n  return (\n    <div\n      onKeyDown={(e) => {\n        console.log(e.code)\n        keyboardHandler(e.code)\n      }}\n    >\n      {drumRoll.map((row, rowIndex) => {\n        return (\n          <div\n            className={'flex gap-1 outline-none'}\n            key={rowIndex}\n            tabIndex={1}\n          >\n            {row.map((value, colIndex) => {\n              return (\n                <div\n                  onClick={() => {\n                    handleToggleNote(rowIndex, colIndex)\n                  }}\n                  className={`mb-1 w-12 h-8 cursor-pointer ${\n                    currentNote.rowIndex === rowIndex &&\n                    currentNote.colIndex === colIndex\n                      ? 'border-4 border-violet-400'\n                      : ''\n                  } ${\n                    value\n                      ? 'bg-blue-700'\n                      : colIndex % 4 === 0\n                      ? 'bg-blue-200'\n                      : 'bg-blue-100'\n                  } ${\n                    isPlaying &&\n                    currentPosition % drumRoll[0].length === colIndex\n                      ? 'opacity-50'\n                      : ''\n                  }`}\n                  key={`${rowIndex}-${colIndex}`}\n                ></div>\n              )\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import { $currentNoteCoords, selectNote } from '@src/models/$currentNoteCoords'\nimport { $patternMatrix, toggleNote } from '@src/models/$patternMatrix'\n\nexport const handleToggleNote = (rowIndex: number, colIndex: number) => {\n  toggleNote(rowIndex, colIndex)\n  selectNote(rowIndex, colIndex)\n}\nexport const keyboardHandler = (key: string) => {\n  const { rowIndex, colIndex } = $currentNoteCoords.getValue()\n  const matrix = $patternMatrix.getValue()\n  // TODO\n  switch (key) {\n    case 'Enter':\n      toggleNote(rowIndex, colIndex)\n      break\n    case 'ArrowLeft':\n      if (typeof matrix[rowIndex]?.[colIndex - 1] !== 'undefined') {\n        selectNote(rowIndex, colIndex - 1)\n      }\n      break\n    case 'ArrowDown':\n      if (typeof matrix[rowIndex + 1]?.[colIndex] !== 'undefined') {\n        selectNote(rowIndex + 1, colIndex)\n      }\n      break\n    case 'ArrowRight':\n      if (typeof matrix[rowIndex]?.[colIndex + 1] !== 'undefined') {\n        selectNote(rowIndex, colIndex + 1)\n      }\n      break\n    case 'ArrowUp':\n      if (typeof matrix[rowIndex - 1]?.[colIndex] !== 'undefined') {\n        selectNote(rowIndex - 1, colIndex)\n      }\n      break\n  }\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $tempo = createStore({\n  bpm: 120,\n  ms: 125,\n})\n\nexport const setTempoByBpm = (bpm: number) => {\n  $tempo.setData({\n    bpm,\n    ms: Math.floor(15_000 / bpm),\n  })\n}\n\nexport const setTempoByIntervalMs = (ms: number) => {\n  $tempo.setData({\n    bpm: Math.floor(60_000 / ms),\n    ms: Math.floor(ms / 4),\n  })\n}\n","import {\n  $currentPlayPosition,\n  incrementCurrentPlayPosition,\n  resetCurrentPlayPosition,\n} from '@src/models/$currentPlayPosition'\nimport { $patternMatrix } from '@src/models/$patternMatrix'\nimport { $tempo, setTempoByIntervalMs } from '@src/models/$tempo'\nimport { A$samples } from '@src/models/A$samples'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { playAudioBuffer } from '@src/utils/playAudioBuffer'\n\nlet interval: any = null\n\nconst play = () => {\n  const samples = A$samples.getValue().data\n  const currentPosition = $currentPlayPosition.getValue()\n  const matrix = $patternMatrix.getValue()\n  matrix.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value && currentPosition % matrix[0].length === colIndex && samples) {\n        playAudioBuffer(samples[rowIndex].audioBuffer)\n      }\n    })\n  })\n}\nexport const handleStartPlaying = () => {\n  F$isPatternPlaying.on()\n  interval = setInterval(() => {\n    play()\n    incrementCurrentPlayPosition()\n  }, $tempo.getValue().ms)\n}\n\nexport const handleStopPlaying = () => {\n  F$isPatternPlaying.off()\n  clearInterval(interval)\n  resetCurrentPlayPosition()\n  interval = null\n}\n\nlet stamp = Date.now()\n\nexport const tapTempo = () => {\n  const currentStamp = Date.now()\n  setTempoByIntervalMs(currentStamp - stamp)\n  stamp = currentStamp\n  if (F$isPatternPlaying.getValue()) {\n    clearInterval(interval)\n    interval = setInterval(() => {\n      play()\n      incrementCurrentPlayPosition()\n    }, $tempo.getValue().ms)\n  }\n}\n$tempo.subscribe((value) => {\n  if (F$isPatternPlaying.getValue()) {\n    clearInterval(interval)\n    interval = setInterval(() => {\n      play()\n      incrementCurrentPlayPosition()\n    }, value.ms)\n  }\n})\n","import { $audioContext } from '@src/models/$audioContext'\n\nexport const playAudioBuffer = (audioBuffer: AudioBuffer) => {\n  const audioContext = $audioContext.getValue()\n  const sourceNode = audioContext.createBufferSource()\n  sourceNode.buffer = audioBuffer\n\n  // Создаем узел управления громкостью и подключаем его к контексту\n  const gainNode = audioContext.createGain()\n\n  // Подключаем источник к узлу управления громкостью\n  sourceNode.connect(gainNode)\n\n  // Подключаем узел управления громкостью к выходу аудио контекста\n  gainNode.connect(audioContext.destination)\n\n  // Воспроизводим аудио\n  sourceNode.playbackRate.value = 4\n  sourceNode.start()\n}\n","import { handleStartPlaying, handleStopPlaying } from '@src/controls/play'\nimport { $currentPlayPosition } from '@src/models/$currentPlayPosition'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { useFlagStore } from '@src/utils/store/useFlagStore'\nimport { useStore } from '@src/utils/store/useStore'\n\nexport const PlayBtn = () => {\n  const isPlaying = useFlagStore(F$isPatternPlaying)\n  const position = useStore($currentPlayPosition)\n\n  return (\n    <button\n      className={'border p-3 rounded'}\n      onClick={isPlaying ? handleStopPlaying : handleStartPlaying}\n    >\n      {isPlaying ? 'Stop' : 'Play'} - {position}\n    </button>\n  )\n}\n","import { tapTempo } from '@src/controls/play'\nimport { $tempo, setTempoByBpm } from '@src/models/$tempo'\nimport { useStore } from '@src/utils/store/useStore'\n\nexport const Tempo = () => {\n  const value = useStore($tempo).bpm\n  return (\n    <div className={'flex'}>\n      <input\n        type=\"number\"\n        value={value}\n        onChange={(e: any) => {\n          setTempoByBpm(+e.target.value)\n        }}\n      />\n      <button onClick={tapTempo}>TAP</button>\n    </div>\n  )\n}\n","import ReactDOM from 'react-dom/client'\n\nimport { App } from './App'\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <App />\n)\n","import { useEffect } from 'react'\n\nimport { clearMatrix } from '@src/models/$patternMatrix'\nimport { A$samples } from '@src/models/A$samples'\nimport { useAsyncStore } from '@src/utils/store/useStore'\nimport { DrumRoll } from '@src/views/DrumRoll'\nimport { PlayBtn } from '@src/views/PlayBtn'\nimport { Tempo } from '@src/views/Tempo'\n\nexport const App = () => {\n  const store = useAsyncStore(A$samples)\n  const { data, isLoading, isError, error } = store\n\n  useEffect(() => {\n    A$samples.startChange()\n  }, [])\n\n  if (isLoading) {\n    return <h1>Loading</h1>\n  }\n  if (isError) {\n    return <h1>Error</h1>\n  }\n  return (\n    <div className={''}>\n      <Tempo />\n      <button onClick={clearMatrix}>Clear</button>\n      <PlayBtn />\n      <div className=\"flex g-2\">\n        <div>\n          {data?.map((item) => {\n            return (\n              <div className={'mb-1 w-20 h-8'} key={item.name}>\n                {item.name}\n              </div>\n            )\n          })}\n        </div>\n        <DrumRoll />\n      </div>\n    </div>\n  )\n}\n"],"names":["createStore","initValue","value","cbs","Set","subscribe","cb","add","delete","setData","data","forEach","getValue","$patternMatrix","Array","fill","toggleNote","rowIndex","colIndex","prev","map","row","ri","ci","clearMatrix","$audioContext","AudioContext","TRACKS","title","fileName","A$samples","asyncFunc","initData","isLoading","isError","error","startChange","args","async","Promise","all","path","name","fetch","arrayBuffer","audioBuffer","decodeAudioData","then","result","catch","useStore","store","useSyncExternalStore","$currentNoteCoords","selectNote","$currentPlayPosition","incrementCurrentPlayPosition","F$isPatternPlaying","createFlagStore","on","off","toggle","useFlagStore","DrumRoll","drumRoll","currentNote","isPlaying","currentPosition","jsx","onKeyDown","e","key","matrix","code","children","className","tabIndex","onClick","length","$tempo","bpm","ms","interval","play","samples","audioContext","sourceNode","createBufferSource","buffer","gainNode","createGain","connect","destination","playbackRate","start","handleStartPlaying","setInterval","handleStopPlaying","clearInterval","stamp","Date","now","tapTempo","currentStamp","Math","floor","PlayBtn","position","jsxs","Tempo","type","onChange","target","ReactDOM","createRoot","document","getElementById","render","useEffect","item"],"mappings":"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"}