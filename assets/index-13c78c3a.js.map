{"version":3,"file":"index-13c78c3a.js","sources":["../../src/utils/store/createStore.ts","../../src/models/$audioContext.ts","../../src/constants.ts","../../src/models/A$samples.ts","../../src/utils/store/createAsyncStore.ts","../../src/api/getSamples.ts","../../src/api/getSample.ts","../../src/utils/store/useStore.ts","../../src/models/$patternMatrix.ts","../../src/views/ClearBtn.tsx","../../src/models/$currentNoteCoords.ts","../../src/models/$currentPlayPosition.ts","../../src/models/F$isPatternPlaying.ts","../../src/utils/store/createFlagStore.ts","../../src/utils/store/useFlagStore.ts","../../src/views/DrumRoll.tsx","../../src/controls/drumPattern.ts","../../src/models/$tempo.ts","../../src/controls/play.ts","../../src/utils/playAudioBuffer.ts","../../src/views/PlayBtn.tsx","../../src/views/Tempo.tsx","../../src/index.tsx","../../src/App.tsx"],"sourcesContent":["import { Store } from '@src/utils/store/types'\n\nexport const createStore = <T>(initValue: T): Store<T> => {\n  let value = initValue\n  const cbs = new Set()\n  return {\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    setData: (data: ((arg: T) => T) | T) => {\n      if (typeof data === 'function') {\n        value = (data as (arg: T) => T)(value)\n      } else {\n        value = data\n      }\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $audioContext = createStore(new AudioContext())\n","export const TRACKS = [\n  {\n    title: 'Closed hh',\n    fileName: 'hh',\n  },\n  {\n    title: 'Opened hh',\n    fileName: 'oh',\n  },\n  {\n    title: 'Clap',\n    fileName: 'cl',\n  },\n  {\n    title: 'Snare',\n    fileName: 'sd',\n  },\n  {\n    title: 'Kick',\n    fileName: 'kd',\n  },\n]\n","import { getSamples } from '@src/api/getSamples'\nimport { createAsyncStore } from '@src/utils/store/createAsyncStore'\n\nexport const A$samples = createAsyncStore<\n  { name: string; audioBuffer: AudioBuffer }[]\n>(getSamples, [])\n","import { AsyncStore } from '@src/utils/store/types'\n\nexport const createAsyncStore = <T>(\n  asyncFunc: any,\n  initData?: T\n): AsyncStore<T> => {\n  let value = {\n    isLoading: false,\n    isError: false,\n    data: initData ?? null,\n    error: null,\n  }\n  const cbs = new Set()\n  return {\n    startChange: (...args) => {\n      value = {\n        ...value,\n        isLoading: true,\n        isError: false,\n        error: null,\n      }\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n      asyncFunc(...args)\n        .then((result: any) => {\n          value = {\n            isLoading: false,\n            isError: false,\n            error: null,\n            data: result,\n          }\n          cbs.forEach((cb: any) => {\n            cb(value)\n          })\n        })\n        .catch((error: any) => {\n          value = {\n            error,\n            isError: true,\n            isLoading: false,\n            data: initData as null,\n          }\n          cbs.forEach((cb: any) => {\n            cb(value)\n          })\n        })\n    },\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    setData: (data: any) => {\n      value = data\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { getSample } from '@src/api/getSample'\nimport { TRACKS } from '@src/constants'\n\nexport const getSamples = async () => {\n  return Promise.all(\n    TRACKS.map(({ title, fileName }) => {\n      return getSample(`sounds/pack1/${fileName}.wav`, title)\n    })\n  )\n}\n","import { $audioContext } from '@src/models/$audioContext'\n\nexport async function getSample(path: string, name: string) {\n  const data = await fetch(`./${path}`)\n  const arrayBuffer = await data.arrayBuffer()\n  const audioBuffer = await $audioContext\n    .getValue()\n    .decodeAudioData(arrayBuffer)\n  return {\n    name,\n    audioBuffer,\n  }\n}\n","import { useSyncExternalStore } from 'react'\n\nimport { AsyncStore, Store } from '@src/utils/store/types'\n\nexport const useStore = <T>(store: Store<T>) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n\nexport const useAsyncStore = <T>(store: AsyncStore<T>) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n","import { TRACKS } from '@src/constants'\nimport { createStore } from '@src/utils/store/createStore'\n\nconst MATRIX_WIDTH = 16\nconst MATRIX_HEIGHT = TRACKS.length\nexport const $patternMatrix = createStore<boolean[][]>(\n  new Array(MATRIX_HEIGHT).fill(\n    new Array(MATRIX_WIDTH).fill(false)\n  ) as boolean[][]\n)\n\nexport const toggleNote = (rowIndex: number, colIndex: number) => {\n  $patternMatrix.setData((prev) => {\n    return prev.map((row, ri) => {\n      return row.map((value, ci) => {\n        return ri === rowIndex && ci === colIndex ? !value : value\n      })\n    })\n  })\n}\n\nexport const clearMatrix = () => {\n  $patternMatrix.setData((prev) => {\n    return prev.map((row) => {\n      return row.map(() => {\n        return false\n      })\n    })\n  })\n}\n","import { clearMatrix } from '@src/models/$patternMatrix'\n\nexport const ClearBtn = () => {\n  return (\n    <button\n      className={'bg-red-700 rounded text-red-50 py-1 px-4'}\n      onClick={clearMatrix}\n    >\n      Clear\n    </button>\n  )\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $currentNoteCoords = createStore({ rowIndex: 0, colIndex: 0 })\nexport const selectNote = (rowIndex: number, colIndex: number) => {\n  $currentNoteCoords.setData({\n    rowIndex,\n    colIndex,\n  })\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $currentPlayPosition = createStore(0)\nexport const incrementCurrentPlayPosition = () => {\n  $currentPlayPosition.setData((prev) => prev + 1)\n}\nexport const resetCurrentPlayPosition = () => {\n  $currentPlayPosition.setData(0)\n}\n","import { createFlagStore } from '@src/utils/store/createFlagStore'\n\nexport const F$isPatternPlaying = createFlagStore(false)\n","import { FlagStore } from '@src/utils/store/types'\n\nexport const createFlagStore = (initValue: boolean): FlagStore => {\n  let value = initValue\n  const cbs = new Set()\n  return {\n    subscribe: (cb: unknown) => {\n      cbs.add(cb)\n      return () => {\n        cbs.delete(cb)\n      }\n    },\n    on: () => {\n      value = true\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    off: () => {\n      value = false\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    toggle: () => {\n      value = !value\n      cbs.forEach((cb: any) => {\n        cb(value)\n      })\n    },\n    getValue: () => {\n      return value\n    },\n  }\n}\n","import { useSyncExternalStore } from 'react'\n\nimport { FlagStore } from '@src/utils/store/types'\n\nexport const useFlagStore = (store: FlagStore) => {\n  return useSyncExternalStore(store.subscribe, store.getValue)\n}\n","import { handleToggleNote, keyboardHandler } from '@src/controls/drumPattern'\nimport { $currentNoteCoords } from '@src/models/$currentNoteCoords'\nimport { $currentPlayPosition } from '@src/models/$currentPlayPosition'\nimport { $patternMatrix } from '@src/models/$patternMatrix'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { useFlagStore } from '@src/utils/store/useFlagStore'\nimport { useStore } from '@src/utils/store/useStore'\n\nexport const DrumRoll = () => {\n  const drumRoll = useStore($patternMatrix)\n  const currentNote = useStore($currentNoteCoords)\n  const isPlaying = useFlagStore(F$isPatternPlaying)\n  const currentPosition = useStore($currentPlayPosition)\n  return (\n    <div\n      className={'bg-blue-50 p-1'}\n      onKeyDown={(e) => {\n        console.log(e.code)\n        keyboardHandler(e.code)\n      }}\n    >\n      {drumRoll.map((row, rowIndex) => {\n        return (\n          <div\n            className={'flex gap-1 outline-none'}\n            key={rowIndex}\n            tabIndex={1}\n          >\n            {row.map((value, colIndex) => {\n              return (\n                <div\n                  onClick={() => {\n                    handleToggleNote(rowIndex, colIndex)\n                  }}\n                  className={`mb-1 w-12 h-8 cursor-pointer rounded ${\n                    currentNote.rowIndex === rowIndex &&\n                    currentNote.colIndex === colIndex\n                      ? 'border-8 border-blue-700'\n                      : ''\n                  } ${\n                    value\n                      ? 'bg-blue-500'\n                      : colIndex % 4 === 0\n                      ? 'bg-blue-200'\n                      : 'bg-blue-100'\n                  } ${\n                    isPlaying &&\n                    currentPosition % drumRoll[0].length === colIndex\n                      ? 'opacity-50'\n                      : ''\n                  } hover:opacity-70`}\n                  key={`${rowIndex}-${colIndex}`}\n                ></div>\n              )\n            })}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n","import { $currentNoteCoords, selectNote } from '@src/models/$currentNoteCoords'\nimport { $patternMatrix, toggleNote } from '@src/models/$patternMatrix'\n\nexport const handleToggleNote = (rowIndex: number, colIndex: number) => {\n  toggleNote(rowIndex, colIndex)\n  selectNote(rowIndex, colIndex)\n}\nexport const keyboardHandler = (key: string) => {\n  const { rowIndex, colIndex } = $currentNoteCoords.getValue()\n  const matrix = $patternMatrix.getValue()\n  // TODO\n  switch (key) {\n    case 'Enter':\n      toggleNote(rowIndex, colIndex)\n      break\n    case 'ArrowLeft':\n      if (typeof matrix[rowIndex]?.[colIndex - 1] !== 'undefined') {\n        selectNote(rowIndex, colIndex - 1)\n      }\n      break\n    case 'ArrowDown':\n      if (typeof matrix[rowIndex + 1]?.[colIndex] !== 'undefined') {\n        selectNote(rowIndex + 1, colIndex)\n      }\n      break\n    case 'ArrowRight':\n      if (typeof matrix[rowIndex]?.[colIndex + 1] !== 'undefined') {\n        selectNote(rowIndex, colIndex + 1)\n      }\n      break\n    case 'ArrowUp':\n      if (typeof matrix[rowIndex - 1]?.[colIndex] !== 'undefined') {\n        selectNote(rowIndex - 1, colIndex)\n      }\n      break\n  }\n}\n","import { createStore } from '@src/utils/store/createStore'\n\nexport const $tempo = createStore({\n  bpm: 120,\n  ms: 125,\n})\n\nexport const setTempoByBpm = (bpm: number) => {\n  $tempo.setData({\n    bpm,\n    ms: Math.floor(15_000 / bpm),\n  })\n}\n\nexport const setTempoByIntervalMs = (ms: number) => {\n  $tempo.setData({\n    bpm: Math.floor(60_000 / ms),\n    ms: Math.floor(ms / 4),\n  })\n}\n","import {\n  $currentPlayPosition,\n  incrementCurrentPlayPosition,\n  resetCurrentPlayPosition,\n} from '@src/models/$currentPlayPosition'\nimport { $patternMatrix } from '@src/models/$patternMatrix'\nimport { $tempo, setTempoByIntervalMs } from '@src/models/$tempo'\nimport { A$samples } from '@src/models/A$samples'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { playAudioBuffer } from '@src/utils/playAudioBuffer'\n\nlet interval: any = null\n\nconst play = () => {\n  const samples = A$samples.getValue().data\n  const currentPosition = $currentPlayPosition.getValue()\n  const matrix = $patternMatrix.getValue()\n  matrix.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      if (value && currentPosition % matrix[0].length === colIndex && samples) {\n        playAudioBuffer(samples[rowIndex].audioBuffer)\n      }\n    })\n  })\n}\nexport const handleStartPlaying = () => {\n  F$isPatternPlaying.on()\n  interval = setInterval(() => {\n    play()\n    incrementCurrentPlayPosition()\n  }, $tempo.getValue().ms)\n}\n\nexport const handleStopPlaying = () => {\n  F$isPatternPlaying.off()\n  clearInterval(interval)\n  resetCurrentPlayPosition()\n  interval = null\n}\n\nlet stamp = Date.now()\n\nexport const tapTempo = () => {\n  const currentStamp = Date.now()\n  setTempoByIntervalMs(currentStamp - stamp)\n  stamp = currentStamp\n  if (F$isPatternPlaying.getValue()) {\n    clearInterval(interval)\n    interval = setInterval(() => {\n      play()\n      incrementCurrentPlayPosition()\n    }, $tempo.getValue().ms)\n  }\n}\n$tempo.subscribe((value) => {\n  if (F$isPatternPlaying.getValue()) {\n    clearInterval(interval)\n    interval = setInterval(() => {\n      play()\n      incrementCurrentPlayPosition()\n    }, value.ms)\n  }\n})\n","import { $audioContext } from '@src/models/$audioContext'\n\nexport const playAudioBuffer = (audioBuffer: AudioBuffer) => {\n  const audioContext = $audioContext.getValue()\n  const sourceNode = audioContext.createBufferSource()\n  sourceNode.buffer = audioBuffer\n  const gainNode = audioContext.createGain()\n  sourceNode.connect(gainNode)\n  gainNode.connect(audioContext.destination)\n  sourceNode.playbackRate.value = 2\n  sourceNode.start()\n}\n","import { handleStartPlaying, handleStopPlaying } from '@src/controls/play'\nimport { F$isPatternPlaying } from '@src/models/F$isPatternPlaying'\nimport { useFlagStore } from '@src/utils/store/useFlagStore'\n\nexport const PlayBtn = () => {\n  const isPlaying = useFlagStore(F$isPatternPlaying)\n\n  return (\n    <button\n      className={'bg-green-700 rounded text-green-50 py-1 px-4'}\n      onClick={isPlaying ? handleStopPlaying : handleStartPlaying}\n    >\n      {isPlaying ? 'Stop' : 'Play'}\n    </button>\n  )\n}\n","import { tapTempo } from '@src/controls/play'\nimport { $tempo, setTempoByBpm } from '@src/models/$tempo'\nimport { useStore } from '@src/utils/store/useStore'\n\nexport const Tempo = () => {\n  const value = useStore($tempo).bpm\n  return (\n    <div className={'flex items-center'}>\n      <div className={'mr-2 text-blue-500'}>BPM:</div>\n      <input\n        className={'w-16 text-center text-blue-600 outline-blue-500'}\n        min={20}\n        max={240}\n        type=\"number\"\n        value={value}\n        onChange={(e: any) => {\n          setTempoByBpm(+e.target.value)\n        }}\n      />\n      <button\n        className={\n          'ml-4 border border-blue-500 rounded text-blue-500 px-2 py-1 hover:bg-blue-100'\n        }\n        onClick={tapTempo}\n      >\n        TAP\n      </button>\n    </div>\n  )\n}\n","import ReactDOM from 'react-dom/client'\n\nimport { App } from './App'\n\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n  <App />\n)\n","import { useEffect } from 'react'\n\nimport { A$samples } from '@src/models/A$samples'\nimport { useAsyncStore } from '@src/utils/store/useStore'\nimport { ClearBtn } from '@src/views/ClearBtn'\nimport { DrumRoll } from '@src/views/DrumRoll'\nimport { PlayBtn } from '@src/views/PlayBtn'\nimport { Tempo } from '@src/views/Tempo'\n\nexport const App = () => {\n  const store = useAsyncStore(A$samples)\n  const { data, isLoading, isError, error } = store\n\n  useEffect(() => {\n    A$samples.startChange()\n  }, [])\n\n  if (isLoading) {\n    return <h1>Loading</h1>\n  }\n  if (isError) {\n    return <h1>Error</h1>\n  }\n  return (\n    <div className={'max-w-7xl w-fit mx-auto montserrat p-2'}>\n      <div className={'flex justify-between p-1 text-xl'}>\n        <PlayBtn />\n        <Tempo />\n        <ClearBtn />\n      </div>\n      <div className=\"flex g-2\">\n        <div className={'p-1'}>\n          {data?.map((item) => {\n            return (\n              <div\n                className={\n                  'mb-1 w-32 px-2 w-20 h-8 leading-8 bg-blue-500 text-blue-50 overflow-ellipsis overflow-hidden'\n                }\n                key={item.name}\n              >\n                {item.name}\n              </div>\n            )\n          })}\n        </div>\n        <DrumRoll />\n      </div>\n    </div>\n  )\n}\n"],"names":["createStore","initValue","value","cbs","Set","subscribe","cb","add","delete","setData","data","forEach","getValue","$audioContext","AudioContext","TRACKS","title","fileName","A$samples","asyncFunc","initData","isLoading","isError","error","startChange","args","async","Promise","all","map","path","name","fetch","arrayBuffer","audioBuffer","decodeAudioData","then","result","catch","useStore","store","useSyncExternalStore","MATRIX_HEIGHT","length","$patternMatrix","Array","fill","toggleNote","rowIndex","colIndex","prev","row","ri","ci","clearMatrix","ClearBtn","jsx","className","onClick","children","$currentNoteCoords","selectNote","$currentPlayPosition","incrementCurrentPlayPosition","F$isPatternPlaying","createFlagStore","on","off","toggle","useFlagStore","DrumRoll","drumRoll","currentNote","isPlaying","currentPosition","onKeyDown","e","code","key","matrix","tabIndex","$tempo","bpm","ms","interval","play","samples","audioContext","sourceNode","createBufferSource","buffer","gainNode","createGain","connect","destination","playbackRate","start","handleStartPlaying","setInterval","handleStopPlaying","clearInterval","stamp","Date","now","tapTempo","currentStamp","Math","floor","PlayBtn","Tempo","jsxs","min","max","type","onChange","target","ReactDOM","createRoot","document","getElementById","render","useEffect","item"],"mappings":"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"}